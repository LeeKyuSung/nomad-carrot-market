// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int         @id @default(autoincrement())
  phone     String?     @unique
  email     String?     @unique
  name      String
  avatar    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  tokens    Token[]
  Session   Session[]
  Product   Product[]
  Favorite  Favorite[]
  Post      Post[]
  Answer    Answer[]
  Wondering Wondering[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Session {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String     @db.MediumText
  price       Int
  image       String     @db.MediumText
  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Favorite    Favorite[]

  @@index([userId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Post {
  id        Int         @id @default(autoincrement())
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
  question  String      @db.MediumText
  latitude  Float?
  longitude Float?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Answer    Answer[]
  Wondering Wondering[]

  @@index([userId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
  answer    String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}

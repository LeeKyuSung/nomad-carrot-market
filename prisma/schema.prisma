// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             Int         @id @default(autoincrement())
  phone          String?     @unique
  email          String?     @unique
  name           String
  avatar         String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tokens         Token[]
  Session        Session[]
  Product        Product[]
  Favorite       Favorite[]
  Post           Post[]
  Answer         Answer[]
  Wondering      Wondering[]
  Stream         Stream[]
  Message        Message[]
  writtendReview Review[]    @relation(name: "writtendReivew")
  receivedReview Review[]    @relation(name: "receivedReview")
  Sale           Sale[]
  Purchase       Purchase[]
  Fav            Fav[]
  // Record         Record[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Session {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String     @db.MediumText
  price       Int
  image       String     @db.MediumText
  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Favorite    Favorite[]
  Sale        Sale[]
  Purchase    Purchase[]
  Fav         Fav[]
  // Record      Record[]

  @@index([userId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Post {
  id        Int         @id @default(autoincrement())
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
  question  String      @db.MediumText
  latitude  Float?
  longitude Float?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Answer    Answer[]
  Wondering Wondering[]

  @@index([userId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
  answer    String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}

model Stream {
  id          Int       @id @default(autoincrement())
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      Int?
  name        String
  description String    @db.MediumText
  price       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Message     Message[]

  @@index([userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
  message   String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([streamId])
  @@index([userId])
}

model Review {
  id           Int      @id @default(autoincrement())
  createdBy    User?    @relation(name: "writtendReivew", fields: [createdById], references: [id], onDelete: SetNull)
  createdById  Int?
  createdFor   User?    @relation(name: "receivedReview", fields: [createdForId], references: [id], onDelete: SetNull)
  createdForId Int?
  review       String   @db.MediumText
  score        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([createdById])
  @@index([createdForId])
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

// model Record {
//   id        Int      @id @default(autoincrement())
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    Int
//   product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId Int
//   kind      Kind
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([userId])
//   @@index([productId])
// }

// enum Kind {
//   Purchase
//   Sale
//   Fav
// }
